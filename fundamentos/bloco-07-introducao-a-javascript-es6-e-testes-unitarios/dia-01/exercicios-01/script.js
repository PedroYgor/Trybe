// üöÄ Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
// Modifique as concatena√ß√µes para template literals.
// Copie o c√≥digo abaixo.
// 1
function testingScope(escopo) {
  if (escopo === true) {
    var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    return console.log(ifScope);
  } else {
    var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    return console.log(elseScope);
  }
}

testingScope(true);

// üöÄ Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
// Copie o c√≥digo abaixo.
// 2
const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// Seu c√≥digo aqui.
const ordenarNumero = (a, b) => a - b; 
console.log(oddsAndEvens.sort(ordenarNumero)); // ser√° necess√°rio alterar essa linha üòâ